
@include test-module("Functions") {

  // Testing set functions
  @include test("config-set [function] Set a single key.") {
    @include config-set("bar", "foo");
    @include config-set("color", #fff);

    $expect: ("bar": "foo", "color": #fff);

    @include assert-equal($sass-config-attr, $expect, "Check if map is correct.");

    @include config-reset("bar");
    @include config-reset("color");
  }

   // Testing namespace set functions
  @include test("config-set [function] Set a single key with namespace.") {
    $sass-config-namespace: "test-" !global;

    @include config-set("bar", "foo");
    @include config-set("color", #fff);

    $expect: ("test-bar": "foo", "test-color": #fff);

    $sass-config-namespace: "" !global;

    @include assert-equal($sass-config-attr, $expect, "Check if map is correct.");
  }

  // Testing set functions
  @include test("config-set [function] Set a single !default key.") {
    @include config-set("single-default", "foo", true);

    $expect: ("single-default": "foo");
    @include assert-equal($sass-config-default, $expect, "Check if map is correct.");
  }

  // Testing set functions
  @include test("config-set [function] Set a dotted key.") {
    @include config-set("test.bar", "foo");
    @include config-set("test.color", #fff);

    $expect: ("bar": "foo", "color": #fff);
    $config: config-get("test");

    @include assert-equal($config, $expect, "Check if map is correct.");
  }

  // Testing set functions
  @include test("config-set [function] Set a map as vlaue.") {
    @include config-set("map", ("bar": "foo", "foo": "bar"));

    $expect: ("bar": "foo", "foo": "bar");
    $config: config-get("map");

    @include assert-equal($config, $expect, "Check if map is correct.");
  }

  // Testing set functions
  @include test("config-set [function] Set a map variable as vlaue.") {
    $color-black: #000 !default;
    $color-white-bg: #fff !default;

    $color: (
        fg: $color-black,
        bg: $color-white-bg
    ) !default;

    @include config-set("map-variable", $color);

    $expect: (fg: #000, bg: #fff);
    $config: config-get("map-variable");

    @include assert-equal($config, $expect, "Check if map is correct.");
  }

  // Testing get functions
  @include test("config-get [function] Get a value from key.") {
    @include config-set("test.color", #000);

    $get: config-get("test.color");
    $expect: #000;

    @include assert-equal($get, $expect, "Returns test.color: #000");
  }

  // Testing get functions
  @include test("config-get [function] Get a map from key.") {
    $get: config-get("test");
    $expect: ("bar": "foo", "color": #000);

    @include assert-equal($get, $expect, "Returns test map.");
  }

  // Testing get functions
  @include test("config-get [function] Get null as value and a warning") {
    $get: config-get("warn");
    $expect: null;

    @include assert-equal($get, $expect, "Returns null.");
  }

  // Testing get functions
  @include test("config-has [function] Get true if a key exist and false if not.") {
    $get: config-has("test");
    $expect: true;

    @include assert-equal($get, $expect, "Returns true.");

    $get: config-has("test-not-found");
    $expect: false;

    @include assert-equal($get, $expect, "Returns false.");
  }

  // Testing set functions
  @include test("config-reset [function] Remove config map.") {
    @include config-set("remove.bar", "foo");
    @include config-set("remove.color", #fff);

    @include config-reset("remove");

    $expect: null;
    $get: config-get("remove");

    @include assert-equal($get, $expect, "Check if config map is removed.");
  }
}
